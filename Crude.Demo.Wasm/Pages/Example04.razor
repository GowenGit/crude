@page "/example-user-profile"

@inject IJSRuntime JsRuntime
@inject UserProfileViewModel UserProfileViewModel
@inject OwnedItemTable Table

<h1 class="main-text">User Profile Form</h1>

<div>
    <CrudeTree ViewModel="UserProfileViewModel" Options="new CrudeOptions(CultureInfo.CurrentCulture)" />
    <CrudeTable TItem="UserItemViewModel" ViewModel="Table" />
</div>

<div class="content">
    <h2 class="main-text">Show me the code</h2>

    <p>
        Let's define all needed view models and <code>OwnedItemTable</code>.
    </p>

    <CodeBlock Value="@Csharp" />

    <p>
        And finally we add a blazor component.
    </p>

    <CodeBlock Value="@Html" />
</div>


@code {
    private const string Html = @"
@inject UserProfileViewModel UserProfileViewModel
@inject OwnedItemTable Table

<div>
    <CrudeTree ViewModel=""UserProfileViewModel"" Options=""new CrudeOptions(CultureInfo.CurrentCulture)"" />
    <CrudeTable TItem=""UserItemViewModel"" ViewModel=""Table"" />
</div>";

    private const string Csharp = @"
public class UserProfileViewModel
{
    [Required]
    [Display(Name = ""Handle"")]
    [MinLength(2)]
    public string Nickname { get; set; } = ""Jeff"";

    [CrudeDisable]
    [CrudeOrder(1)]
    [EmailAddress]
    public string Email { get; set; } = ""jeff@email.com"";

    [Required]
    public DateTime Birthday { get; set; } = DateTime.Now.AddYears(-30);

    [Required]
    public Gender Gender { get; set; } = Gender.Male;

    public string Description { get; set; }

    [CrudeIgnore]
    public string Name { get; set; }

    [CrudeDisable]
    [Display(Name = ""Balance (USD)"")]
    public int? Balance { get; set; }

    [CrudeOnSubmit(""Save"")]
    private void OnSave(EditContext context)
    {
        Console.WriteLine(""Save button clicked"");
    }

    [CrudeOnButtonClick(""Close Account"")]
    private void OnClose(EditContext context)
    {
        Console.WriteLine(""Close Account button clicked"");
    }
}

/// <summary>
/// Very inefficient implementation.
/// </summary>
public class OwnedItemTable : CrudeTableModel<UserItemViewModel>
{
    private readonly DummyDataService _dummyDataService;

    public OwnedItemTable(DummyDataService dummyDataService)
    {
        IsSearchable = false;
        IsSortable = true;
        TablePageSize = 10;
        _dummyDataService = dummyDataService;
    }

    public override Task<ulong> GetTotalElementCountAsync()
    {
        return Task.FromResult((ulong)GetElementsInternal(0, int.MaxValue).Count());
    }

    public override Task<IEnumerable<UserItemViewModel>> GetElementsAsync()
    {
        return Task.FromResult(GetElementsInternal((int)Page, (int)TablePageSize));
    }

    private IEnumerable<UserItemViewModel> GetElementsInternal(int pageIndex, int size)
    {
        var products = _dummyDataService.GetProducts();

        // Search part
        if (!string.IsNullOrWhiteSpace(UnescapedSearchTerm))
        {
            products = products.Where(product => product.DisplayName
                .Contains(UnescapedSearchTerm, StringComparison.CurrentCultureIgnoreCase));
        }

        // Sort part
        if (!string.IsNullOrWhiteSpace(SortColumn))
        {
            var propertyInfo = typeof(Product).GetProperty(SortColumn);

            if (SortDescending)
            {
                products = products
                    .OrderByDescending(
                        product => propertyInfo!.GetValue(product));
            }
            else
            {
                products = products
                    .OrderBy(
                        product => propertyInfo!.GetValue(product));
            }
        }

        // Pagination part
        return products
            .Skip(pageIndex * size)
            .Take(size)
            .Select(product => new UserItemViewModel(product));
    }
}

public class UserItemViewModel
{
    public int Id { get; }

    [Display(Name = ""Name"")]
    public string DisplayName { get; }

    /// <summary>
    /// List item view models need
    /// a default constructor.
    /// </summary>
    public UserItemViewModel() { }

    public UserItemViewModel(Product product)
    {
        Id = product.Id;
        DisplayName = product.DisplayName;
    }

    [CrudeOnClick(nameof(Id))]
    private void OnClick()
    {
        Console.WriteLine($""Id {Id} was pressed"");
    }
}

public enum Gender
{
    Male = 0,
    Female = 1
}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("Highlight");
    }
}
